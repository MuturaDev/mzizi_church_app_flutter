def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '2'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '2.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
   def keystorePropertiesFile = rootProject.file('key.properties')
   if (keystorePropertiesFile.exists()) {
       keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
   }

android {
    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "mobile.ultratude.com.mzizichurchsystem"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 11//flutterVersionCode.toInteger()
        versionName "3.1.0"//flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

     signingConfigs {
       release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
           storePassword keystoreProperties['storePassword']
       }
   }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            //signingConfig signingConfigs.debug
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "app"

    productFlavors{

        mzizicms {//MziziCMS
            dimension "app"
            resValue "string","app_name", "MziziCMS"
            applicationId "mobile.ultratude.com.mzizichurchsystem"
            //applicationIdSuffix ".mzizicms"
            versionCode 11
            versionName "3.1.0"

        }

        bwmc {//The Bible Way Ministries
            dimension "app"
            resValue "string","app_name", "BWMC"
            applicationId "mobile.ultratude.com.mzizichurchsystem"
            applicationIdSuffix ".bwmc"
            versionCode 12
            versionName "3.1.0"
        }

        dcik {//Deliverance Church International Kasarani
            dimension "app"
            resValue "string","app_name", "DCIK"
            applicationId "mobile.ultratude.com.mzizichurchsystem"
            applicationIdSuffix ".dcik"
            versionCode 13
            versionName "3.1.0"
        }

        jcc {//Jubilee Christian Church
            dimension "app"
            resValue "string","app_name", "JCC"
            applicationId "mobile.ultratude.com.mzizichurchsystem"
            applicationIdSuffix ".jcc"
            versionCode 14
            versionName "3.1.0"
        }

    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
